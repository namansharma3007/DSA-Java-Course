class:
    -> is names group of properties and functions
    -> final: this keyword will prevent the original data to be modified

static:
    -> object that is common to everyone
    -> they are not dependent on object i.e. they can be accessed even without declaring any object. We can directly access it by using class name
    -> static variable is accessed by class name and not by using "this" [For example refer: /OOPS/staticExample/Human.java]
    *-> main is declared static because we need to run this before creation of any object
    -> static method can only access static methods
    -> something that is non-static belongs to an object / instance
    -> we can have static member inside a non-static one
    -> we cannot use this keyword inside static method: same as we cannot access non-static from static methods
    -> static methods are resolved during compile time not run-time


inheritance:
    -> properties passed on by parents and you can use those properties
    -> a class which is able to use properties and stuff of other class
    -> child class is able to use properties of base class
    -> this is done by using extends keykword
    -> reference variable will decide which all type of variables we access
    -> if reference variable is of parent class and reference object is of child class, then all the variables will be initialized but we won't be able to access variables of child class. We only would be able to acess variables of reference type