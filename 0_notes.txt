a) Binary Number
    Mostly sorted array
    Square root

    #IMP
    /* Ceiling of a no */
    When we need to return the no greater than or equal to the given no. The greater no should also be present in the list. Just return start in place of -1.

    /* Floor of a no */
    Would be same as the above one just return end in place of -1.

b) Format a string
    %c - Character
    %d - Decimal number (base 10)
    %e - Exponential floating-point number
    %f - Floating-point number
    %i - Integer (base 10)
    %o - Octal number (base 8)
    %s - String
    %u - Unsigned decimal (integer) number
    %x - Hexadecimal number (base 16)
    %t - Date/time
    %n - Newline

c) Patterns
    # if you are given numbers try not to use 0 as inintial value in loop => use "i=1"
    Step 1 - run outer for loop for the no of lines
    Step 2 - how may columns are there with each row 
    Step 3 - what do you need to print

d) Cyclic Sort
    - use one its given like [1,n] or [0,n] => It got to be continuous

e) Recursion
    - It helps us in solving bigger/complex problems in a simple way
    - You can conert recursion solution into iteration & vice versa
    - DEMERIT - Space complexity is not constant because of resursive calls
    - It helps us breaking bigger problems into smaller problems

    Need To Remember While Solving problems:
    - Identify if you can break down problem into smaller problem
    - Writedown the recurrence relation if needed
    - Draw the recursive tree
    => About the Tree:
        - See the flo of function, how they are getting in stack
        - Identify and focus on left tree calls and right tree calls
        - Draw the tree and pointer again and again using pen and paper
        - Use a debugger to see the flow
    
    - See how the values and what values are returned at each Step
    - See where the function call will come out, In the end you will come out of the main function
    - Do a lot of questions

    - Variables : Arguments; Return Type; Body of function


    -> Types of recurrence relation:
        - Linear reccurence relation - eg - fibonacci nos
        - Divide & conquer reccurence relation

    -> Do not over-think
    -> Make sure to return the result of a function call of the return type